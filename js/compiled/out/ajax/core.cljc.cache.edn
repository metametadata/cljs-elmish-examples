;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name ajax.core, :imports nil, :requires {t cognitect.transit, xhr goog.net.XhrIo, goog.net.XhrIo goog.net.XhrIo, ajax.xml-http-request ajax.xml-http-request, goog.json goog.json, goog.Uri.QueryData goog.Uri.QueryData, query-data goog.Uri.QueryData, cognitect.transit cognitect.transit, goog.structs goog.structs, goog-json goog.json, structs goog.structs, s clojure.string, goog.json.Serializer goog.json.Serializer, ajax.protocols ajax.protocols, str clojure.string, clojure.string clojure.string, ajax.xhrio ajax.xhrio}, :uses {-status ajax.protocols, AjaxImpl ajax.protocols, Interceptor ajax.protocols, -abort ajax.protocols, -status-text ajax.protocols, -get-response-header ajax.protocols, AjaxResponse ajax.protocols, AjaxRequest ajax.protocols, -process-response ajax.protocols, -was-aborted ajax.protocols, -process-request ajax.protocols, -body ajax.protocols, -js-ajax-request ajax.protocols, Response ajax.protocols}, :defs {PUT {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 577, :column 13, :end-line 577, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/PUT, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 577, :end-line 577, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, detect-content-type {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 411, :column 17, :end-line 411, :end-column 36, :arglists (quote ([content-type request format-entry] [content-type request] [content-type])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type request format-entry] [content-type request] [content-type]), :arglists ([content-type request format-entry] [content-type request] [content-type]), :arglists-meta (nil nil nil)}}, :name ajax.core/detect-content-type, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 36, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type request format-entry] [content-type request] [content-type]), :arglists ([content-type request format-entry] [content-type request] [content-type]), :arglists-meta (nil nil nil)}, :method-params ([content-type request format-entry] [content-type request] [content-type]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 3, :fn-var true, :arglists ([content-type request format-entry] [content-type request] [content-type])}, POST {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 576, :column 13, :end-line 576, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/POST, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 576, :end-line 576, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, accept-header {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 429, :column 7, :end-line 429, :end-column 20, :arglists (quote ([{:keys [response-format], :as request}]))}, :name ajax.core/accept-header, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 20, :method-params ([p__27700]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as request}]))}, transit-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 254, :column 7, :end-line 254, :end-column 29, :arglists (quote ([] [request])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [request]), :arglists ([] [request]), :arglists-meta (nil nil)}}, :name ajax.core/transit-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [request]), :arglists ([] [request]), :arglists-meta (nil nil)}, :method-params ([] [request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists ([] [request])}, transit-write-fn {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 243, :column 17, :end-line 243, :end-column 33, :arglists (quote ([type request]))}, :name ajax.core/transit-write-fn, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 33, :method-params ([type request]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type request]))}, vec-param-to-str {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 150, :column 17, :end-line 150, :end-column 33, :arglists (quote ([prefix key value] [prefix key] [prefix])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([prefix key value] [prefix key] [prefix]), :arglists ([prefix key value] [prefix key] [prefix]), :arglists-meta (nil nil nil)}}, :name ajax.core/vec-param-to-str, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 33, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([prefix key value] [prefix key] [prefix]), :arglists ([prefix key value] [prefix key] [prefix]), :arglists-meta (nil nil nil)}, :method-params ([prefix key value] [prefix key] [prefix]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists ([prefix key value] [prefix key] [prefix])}, json-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 328, :column 7, :end-line 328, :end-column 26, :arglists (quote ([]))}, :name ajax.core/json-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, throw-error {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 203, :column 7, :end-line 203, :end-column 18, :arglists (quote ([args]))}, :name ajax.core/throw-error, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 18, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args]))}, ->ApplyRequestFormat {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 219, :column 12, :end-line 219, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.core/->ApplyRequestFormat, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 219, :end-line 219, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, success? {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 61, :column 7, :end-line 61, :end-column 15, :arglists (quote ([status]))}, :name ajax.core/success?, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 15, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status]))}, ProcessGet {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.core/ProcessGet, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 194, :record true, :end-line 194, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, raw-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 295, :column 7, :end-line 295, :end-column 26, :arglists (quote ([] [_])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [_]), :arglists ([] [_]), :arglists-meta (nil nil)}}, :name ajax.core/raw-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [_]), :arglists ([] [_]), :arglists-meta (nil nil)}, :method-params ([] [_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists ([] [_])}, exception-message {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 67, :column 17, :end-line 67, :end-column 34, :arglists (quote ([e]))}, :name ajax.core/exception-message, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 34, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, Interceptor {:impls (ajax.core/ApplyRequestFormat ajax.core/DirectSubmission ajax.core/ProcessGet ajax.core/ResponseFormat ajax.core/StandardInterceptor)}, ->DirectSubmission {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 207, :column 12, :end-line 207, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.core/->DirectSubmission, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 207, :end-line 207, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, request-interceptors {:name ajax.core/request-interceptors, :file "resources/public/js/compiled/out/ajax/core.cljc", :line 481, :column 1, :end-line 481, :end-column 26, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 481, :column 6, :end-line 481, :end-column 26}}, raw-ajax-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 498, :column 7, :end-line 498, :end-column 23, :arglists (quote ([{:keys [interceptors], :as request}]))}, :name ajax.core/raw-ajax-request, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 23, :method-params ([p__27730]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [interceptors], :as request}]))}, DirectSubmission {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.core/DirectSubmission, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 28, :type true, :column 12, :internal-ctor true, :line 207, :record true, :end-line 207, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 188, :column 7, :end-line 188, :end-column 25, :arglists (quote ([format]))}, :name ajax.core/get-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 25, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, to-interceptor {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([m]))}, :name ajax.core/to-interceptor, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, get-default-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 416, :column 7, :end-line 416, :end-column 25, :arglists (quote ([response {:keys [response-format], :as request}]))}, :name ajax.core/get-default-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 25, :method-params ([response p__27688]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response {:keys [response-format], :as request}]))}, apply-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 213, :column 7, :end-line 213, :end-column 27, :arglists (quote ([write params]))}, :name ajax.core/apply-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 27, :method-params ([write params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([write params]))}, content-type-to-request-header {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 94, :column 7, :end-line 94, :end-column 37, :arglists (quote ([content-type]))}, :name ajax.core/content-type-to-request-header, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 37, :method-params ([content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content-type]))}, process-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 40, :column 7, :end-line 40, :end-column 22, :arglists (quote ([request interceptor]))}, :name ajax.core/process-request, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :method-params ([request interceptor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request interceptor]))}, detect-response-format-read {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 424, :column 17, :end-line 424, :end-column 44, :arglists (quote ([request response] [request])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request response] [request]), :arglists ([request response] [request]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format-read, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 44, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request response] [request]), :arglists ([request response] [request]), :arglists-meta (nil nil)}, :method-params ([request response] [request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 2, :fn-var true, :arglists ([request response] [request])}, map->StandardInterceptor {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 44, :column 12, :end-line 44, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__27507]))}, :name ajax.core/map->StandardInterceptor, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 31, :method-params ([G__27507]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27507]))}, default-formats {:name ajax.core/default-formats, :file "resources/public/js/compiled/out/ajax/core.cljc", :line 379, :column 1, :end-line 379, :end-column 21, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 379, :column 6, :end-line 379, :end-column 21}}, map->ApplyRequestFormat {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 219, :column 12, :end-line 219, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__27606]))}, :name ajax.core/map->ApplyRequestFormat, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :method-params ([G__27606]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27606]))}, keyword-response-format-element {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 522, :column 7, :end-line 522, :end-column 38, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format-element, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 38, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 522, :end-line 522, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, new-default-api {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 494, :column 7, :end-line 494, :end-column 22, :arglists (quote ([]))}, :name ajax.core/new-default-api, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 494, :end-line 494, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 445, :column 7, :end-line 445, :end-column 26, :arglists (quote ([{:keys [response-format], :as opts}]))}, :name ajax.core/get-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :method-params ([p__27712]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as opts}]))}, easy-ajax-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 567, :column 7, :end-line 567, :end-column 24, :arglists (quote ([uri method opts]))}, :name ajax.core/easy-ajax-request, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 24, :method-params ([uri method opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 567, :end-line 567, :max-fixed-arity 3, :fn-var true, :arglists (quote ([uri method opts]))}, map->ResponseFormat {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 101, :column 12, :end-line 101, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__27539]))}, :name ajax.core/map->ResponseFormat, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :method-params ([G__27539]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27539]))}, get-accept-entries {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 398, :column 17, :end-line 398, :end-column 35, :arglists (quote ([request format-entry] [request])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request format-entry] [request]), :arglists ([request format-entry] [request]), :arglists-meta (nil nil)}}, :name ajax.core/get-accept-entries, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 35, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request format-entry] [request]), :arglists ([request format-entry] [request]), :arglists-meta (nil nil)}, :method-params ([request format-entry] [request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 2, :fn-var true, :arglists ([request format-entry] [request])}, text-response-format {:name ajax.core/text-response-format, :file "resources/public/js/compiled/out/ajax/core.cljc", :line 321, :column 5, :end-line 321, :end-column 30, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 321, :column 10, :end-line 321, :end-column 30}}, exception-response {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 69, :column 7, :end-line 69, :end-column 25, :arglists (quote ([e status {:keys [description]} xhrio]))}, :name ajax.core/exception-response, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 25, :method-params ([e status p__27523 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio]))}, get-content-type {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 56, :column 7, :end-line 56, :end-column 23, :arglists (quote ([response]))}, :name ajax.core/get-content-type, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 23, :method-params ([response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([response]))}, uri-with-params {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 181, :column 7, :end-line 181, :end-column 22, :arglists (quote ([uri params]))}, :name ajax.core/uri-with-params, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :method-params ([uri params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uri params]))}, transform-handler {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 545, :column 17, :end-line 545, :end-column 34, :arglists (quote ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}}, :name ajax.core/transform-handler, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 545, :end-line 545, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])}, transform-opts {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 552, :column 7, :end-line 552, :end-column 21, :arglists (quote ([{:keys [method format response-format params body], :as opts}]))}, :name ajax.core/transform-opts, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 21, :method-params ([p__27763]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 552, :end-line 552, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method format response-format params body], :as opts}]))}, js-handler {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 462, :column 17, :end-line 462, :end-column 27, :arglists (quote ([handler interceptors response] [handler interceptors] [handler])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([handler interceptors response] [handler interceptors] [handler]), :arglists ([handler interceptors response] [handler interceptors] [handler]), :arglists-meta (nil nil nil)}}, :name ajax.core/js-handler, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([handler interceptors response] [handler interceptors] [handler]), :arglists ([handler interceptors response] [handler interceptors] [handler]), :arglists-meta (nil nil nil)}, :method-params ([handler interceptors response] [handler interceptors] [handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 3, :fn-var true, :arglists ([handler interceptors response] [handler interceptors] [handler])}, transit-read-fn {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 262, :column 17, :end-line 262, :end-column 32, :arglists (quote ([request]))}, :name ajax.core/transit-read-fn, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 32, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, normalize-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 485, :column 7, :end-line 485, :end-column 24, :arglists (quote ([request]))}, :name ajax.core/normalize-request, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 24, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, ->ProcessGet {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 194, :column 12, :end-line 194, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.core/->ProcessGet, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 194, :end-line 194, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, StandardInterceptor {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.core/StandardInterceptor, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 31, :type true, :column 12, :internal-ctor true, :line 44, :record true, :end-line 44, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, DELETE {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 578, :column 13, :end-line 578, :end-column 19, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/DELETE, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, params-to-str-old {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 140, :column 11, :end-line 140, :end-column 28, :arglists (quote ([params]))}, :name ajax.core/params-to-str-old, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 28, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 5, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, params-to-str {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 175, :column 7, :end-line 175, :end-column 20, :arglists (quote ([params]))}, :name ajax.core/params-to-str, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, json-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 360, :column 7, :end-line 360, :end-column 27, :arglists (quote ([] [{:keys [prefix keywords? raw]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}}, :name ajax.core/json-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [prefix keywords? raw]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [prefix keywords? raw]}]), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"}, content-type-matches {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 406, :column 17, :end-line 406, :end-column 37, :arglists (quote ([content-type accept] [content-type])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([content-type accept] [content-type]), :arglists ([content-type accept] [content-type]), :arglists-meta (nil nil)}}, :name ajax.core/content-type-matches, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 37, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([content-type accept] [content-type]), :arglists ([content-type accept] [content-type]), :arglists-meta (nil nil)}, :method-params ([content-type accept] [content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 406, :end-line 406, :max-fixed-arity 2, :fn-var true, :arglists ([content-type accept] [content-type])}, map->ProcessGet {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 194, :column 12, :end-line 194, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__27584]))}, :name ajax.core/map->ProcessGet, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 22, :method-params ([G__27584]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27584]))}, ApplyRequestFormat {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.core/ApplyRequestFormat, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :type true, :column 12, :internal-ctor true, :line 219, :record true, :end-line 219, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 387, :column 17, :end-line 387, :end-column 27, :arglists (quote ([request format-entry] [request])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request format-entry] [request]), :arglists ([request format-entry] [request]), :arglists-meta (nil nil)}}, :name ajax.core/get-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([request format-entry] [request]), :arglists ([request format-entry] [request]), :arglists-meta (nil nil)}, :method-params ([request format-entry] [request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists ([request format-entry] [request])}, abort {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 59, :column 7, :end-line 59, :end-column 12, :arglists (quote ([this]))}, :name ajax.core/abort, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, strip-prefix {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 347, :column 18, :end-line 347, :end-column 30, :arglists (quote ([prefix text]))}, :name ajax.core/strip-prefix, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :method-params ([prefix text]), :protocol-impl nil, :arglists-meta (nil nil), :column 12, :line 347, :end-line 347, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix text]))}, ajax-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 504, :column 7, :end-line 504, :end-column 19, :arglists (quote ([request]))}, :name ajax.core/ajax-request, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 504, :end-line 504, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, ->ResponseFormat {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 101, :column 12, :end-line 101, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([read description content-type]))}, :name ajax.core/->ResponseFormat, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :method-params ([read description content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([read description content-type]))}, default-interceptors {:name ajax.core/default-interceptors, :file "resources/public/js/compiled/out/ajax/core.cljc", :line 483, :column 1, :end-line 483, :end-column 26, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 483, :column 6, :end-line 483, :end-column 26}}, normalize-method {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 457, :column 7, :end-line 457, :end-column 23, :arglists (quote ([method]))}, :name ajax.core/normalize-method, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 23, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method]))}, url-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 291, :column 7, :end-line 291, :end-column 25, :arglists (quote ([]))}, :name ajax.core/url-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, keyword-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 538, :column 7, :end-line 538, :end-column 30, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 538, :end-line 538, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, write-json {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 323, :column 17, :end-line 323, :end-column 27, :arglists (quote ([data]))}, :name ajax.core/write-json, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 27, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, fail {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 86, :column 7, :end-line 86, :end-column 11, :arglists (quote ([status status-text failure & params])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}}, :name ajax.core/fail, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}, :method-params [(status status-text failure params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists ([status status-text failure & params])}, GET {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 574, :column 13, :end-line 574, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/GET, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, transit-type {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 240, :column 7, :end-line 240, :end-column 19, :arglists (quote ([{:keys [type]}]))}, :name ajax.core/transit-type, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 19, :method-params ([p__27617]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type]}]))}, HEAD {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 575, :column 13, :end-line 575, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/HEAD, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 575, :end-line 575, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, TRACE {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 580, :column 13, :end-line 580, :end-column 18, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/TRACE, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 580, :end-line 580, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, transit-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 278, :column 7, :end-line 278, :end-column 30, :arglists (quote ([] [request] [type request])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [request] [type request]), :arglists ([] [request] [type request]), :arglists-meta (nil nil nil)}}, :name ajax.core/transit-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [request] [type request]), :arglists ([] [request] [type request]), :arglists-meta (nil nil nil)}, :method-params ([] [request] [type request]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists ([] [request] [type request])}, base-handler {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 476, :column 7, :end-line 476, :end-column 19, :arglists (quote ([interceptors {:keys [handler]}]))}, :name ajax.core/base-handler, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 19, :method-params ([interceptors p__27724]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 476, :end-line 476, :max-fixed-arity 2, :fn-var true, :arglists (quote ([interceptors {:keys [handler]}]))}, detect-response-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 434, :column 7, :end-line 434, :end-column 29, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 434, :end-line 434, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, text-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 302, :column 7, :end-line 302, :end-column 26, :arglists (quote ([]))}, :name ajax.core/text-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, PATCH {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 581, :column 13, :end-line 581, :end-column 18, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/PATCH, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 581, :end-line 581, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, json-read {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 352, :column 17, :end-line 352, :end-column 26, :arglists (quote ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}}, :name ajax.core/json-read, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 4, :fn-var true, :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])}, process-response {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 36, :column 7, :end-line 36, :end-column 23, :arglists (quote ([response interceptor]))}, :name ajax.core/process-response, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 23, :method-params ([response interceptor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response interceptor]))}, param-to-str {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 153, :column 17, :end-line 153, :end-column 29, :arglists (quote ([prefix [key value]] [prefix])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prefix [key value]] [prefix]), :arglists ([prefix [key value]] [prefix]), :arglists-meta (nil nil)}}, :name ajax.core/param-to-str, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prefix [key value]] [prefix]), :arglists ([prefix [key value]] [prefix]), :arglists-meta (nil nil)}, :method-params ([prefix [key value]] [prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists ([prefix [key value]] [prefix])}, to-utf8-writer {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 168, :column 7, :end-line 168, :end-column 21, :arglists (quote ([to-str]))}, :name ajax.core/to-utf8-writer, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 21, :method-params ([to-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([to-str]))}, ->StandardInterceptor {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 44, :column 12, :end-line 44, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([name request response]))}, :name ajax.core/->StandardInterceptor, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 31, :method-params ([name request response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name request response]))}, keyword-request-format {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 509, :column 7, :end-line 509, :end-column 29, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-request-format, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 29, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 509, :end-line 509, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, ResponseFormat {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.core/ResponseFormat, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 26, :type true, :column 12, :internal-ctor true, :line 101, :record true, :end-line 101, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->DirectSubmission {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 207, :column 12, :end-line 207, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__27595]))}, :name ajax.core/map->DirectSubmission, :variadic false, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 28, :method-params ([G__27595]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27595]))}, OPTIONS {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/core.cljc", :line 579, :column 13, :end-line 579, :end-column 20, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/OPTIONS, :variadic true, :file "resources/public/js/compiled/out/ajax/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}}, :require-macros {m ajax.macros, ajax.macros ajax.macros, p poppea, poppea poppea}, :cljs.analyzer/constants {:seen #{:response :description :finally :format :request :api :original-text :keywords? :read :else :failure response description :method :raw :name :response-format :status-text request :aborted :params read :type :parse-error :prefix :headers :error-handler :write name :status :writer :reader :parse :content-type :error :exception :uri :interceptors :json :timeout :body :handler :keywordize-keys content-type :failed}, :order [:request :response :name name request response :description :status :failure :error :status-text :parse :original-text :parse-error :content-type :headers :read :exception :else :failed :aborted :timeout read description content-type :write :method :uri :params :body :format :type :json :writer :reader :raw :keywordize-keys :prefix :keywords? :response-format :handler :interceptors :api :error-handler :finally]}, :doc nil}