;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name ajax.protocols, :imports nil, :requires nil, :uses nil, :defs {-status {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 17, :column 4, :end-line 17, :end-column 11, :protocol ajax.protocols/AjaxResponse, :doc "Returns the HTTP Status of the response as an integer.", :arglists (quote ([this]))}, :protocol ajax.protocols/AjaxResponse, :name ajax.protocols/-status, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status of the response as an integer."}, AjaxImpl {:meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 3, :column 14, :end-line 3, :end-column 22, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-js-ajax-request [[this request handler]]}}}, :protocol-symbol true, :name ajax.protocols/AjaxImpl, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 22, :column 1, :line 3, :protocol-info {:methods {-js-ajax-request [[this request handler]]}}, :info nil, :end-line 3, :impls #{}, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :jsdoc ("@interface")}, Interceptor {:meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 28, :column 14, :end-line 28, :end-column 25, :doc "An abstraction for something that processes requests and responses.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-process-request [[this request]], -process-response [[this response]]}}}, :protocol-symbol true, :name ajax.protocols/Interceptor, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 25, :column 1, :line 28, :protocol-info {:methods {-process-request [[this request]], -process-response [[this response]]}}, :info nil, :end-line 28, :impls #{}, :doc "An abstraction for something that processes requests and responses.", :jsdoc ("@interface")}, -abort {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 12, :column 4, :end-line 12, :end-column 10, :protocol ajax.protocols/AjaxRequest, :doc "Aborts a running ajax request, if possible.", :arglists (quote ([this]))}, :protocol ajax.protocols/AjaxRequest, :name ajax.protocols/-abort, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Aborts a running ajax request, if possible."}, -status-text {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 19, :column 4, :end-line 19, :end-column 16, :protocol ajax.protocols/AjaxResponse, :doc "Returns the HTTP Status Text of the response as a string.", :arglists (quote ([this]))}, :protocol ajax.protocols/AjaxResponse, :name ajax.protocols/-status-text, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status Text of the response as a string."}, -get-response-header {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 23, :column 4, :end-line 23, :end-column 24, :protocol ajax.protocols/AjaxResponse, :doc "Gets the specified response header (specified by a string) as a string.", :arglists (quote ([this header]))}, :protocol ajax.protocols/AjaxResponse, :name ajax.protocols/-get-response-header, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 24, :method-params ([this header]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this header])), :doc "Gets the specified response header (specified by a string) as a string."}, AjaxResponse {:meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 15, :column 14, :end-line 15, :end-column 26, :doc "An abstraction for an ajax response.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}}, :protocol-symbol true, :name ajax.protocols/AjaxResponse, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 26, :column 1, :line 15, :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}, :info nil, :end-line 15, :impls #{ajax.protocols/Response}, :doc "An abstraction for an ajax response.", :jsdoc ("@interface")}, ->Response {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 35, :column 12, :end-line 35, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([status body status-text headers was-aborted]))}, :name ajax.protocols/->Response, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 20, :method-params ([status body status-text headers was-aborted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 35, :end-line 35, :max-fixed-arity 5, :fn-var true, :arglists (quote ([status body status-text headers was-aborted]))}, AjaxRequest {:meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 10, :column 14, :end-line 10, :end-column 25, :doc "An abstraction for a running ajax request.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-abort [[this]]}}}, :protocol-symbol true, :name ajax.protocols/AjaxRequest, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 25, :column 1, :line 10, :protocol-info {:methods {-abort [[this]]}}, :info nil, :end-line 10, :impls #{}, :doc "An abstraction for a running ajax request.", :jsdoc ("@interface")}, -process-response {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 32, :column 4, :end-line 32, :end-column 21, :protocol ajax.protocols/Interceptor, :doc "Transforms the raw response (an implementation of AjaxResponse)", :arglists (quote ([this response]))}, :protocol ajax.protocols/Interceptor, :name ajax.protocols/-process-response, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 21, :method-params ([this response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this response])), :doc "Transforms the raw response (an implementation of AjaxResponse)"}, -was-aborted {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 25, :column 4, :end-line 25, :end-column 16, :protocol ajax.protocols/AjaxResponse, :doc "Was the response aborted.", :arglists (quote ([this]))}, :protocol ajax.protocols/AjaxResponse, :name ajax.protocols/-was-aborted, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Was the response aborted."}, -process-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 30, :column 4, :end-line 30, :end-column 20, :protocol ajax.protocols/Interceptor, :doc "Transforms the opts", :arglists (quote ([this request]))}, :protocol ajax.protocols/Interceptor, :name ajax.protocols/-process-request, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 20, :method-params ([this request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this request])), :doc "Transforms the opts"}, -body {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 21, :column 4, :end-line 21, :end-column 9, :protocol ajax.protocols/AjaxResponse, :doc "Returns the response body as a string or as type specified in response-format such as a blob or arraybuffer.", :arglists (quote ([this]))}, :protocol ajax.protocols/AjaxResponse, :name ajax.protocols/-body, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the response body as a string or as type specified in response-format such as a blob or arraybuffer."}, map->Response {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 35, :column 12, :end-line 35, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__27857]))}, :name ajax.protocols/map->Response, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 20, :method-params ([G__27857]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27857]))}, -js-ajax-request {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/resources/public/js/compiled/out/ajax/protocols.cljc", :line 6, :column 4, :end-line 6, :end-column 20, :protocol ajax.protocols/AjaxImpl, :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :arglists (quote ([this request handler]))}, :protocol ajax.protocols/AjaxImpl, :name ajax.protocols/-js-ajax-request, :variadic false, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 20, :method-params ([this request handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this request handler])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest."}, Response {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/AjaxResponse cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.protocols/Response, :file "resources/public/js/compiled/out/ajax/protocols.cljc", :end-column 20, :type true, :column 12, :internal-ctor true, :line 35, :record true, :end-line 35, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{body :was-aborted :status-text was-aborted :headers status-text :status headers status :body}, :order [:status :body :status-text :headers :was-aborted status body status-text headers was-aborted]}, :doc nil}