;; Analyzed by ClojureScript 1.7.122
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.random-gif-list, :imports nil, :requires {ui frontend.ui, frontend.ui frontend.ui, r reagent.core, reagent.core reagent.core, cljs.core.match cljs.core.match, random-gif frontend.random-gif, frontend.random-gif frontend.random-gif, s com.rpl.specter, com.rpl.specter com.rpl.specter}, :uses nil, :defs {reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([model command]))}, :name frontend.random-gif-list/reconcile, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 16, :method-params ([model command]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model command]))}, is-enter-key? {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 75, :column 7, :end-line 75, :end-column 20, :arglists (quote ([e]))}, :name frontend.random-gif-list/is-enter-key?, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 20, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 79, :column 7, :end-line 79, :end-column 11, :arglists (quote ([view-model dispatch]))}, :name frontend.random-gif-list/view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch]))}, model {:name frontend.random-gif-list/model, :file "src/frontend/random_gif_list.cljs", :line 94, :column 1, :end-line 94, :end-column 15, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 94, :column 10, :end-line 94, :end-column 15}}, update-gif {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([model id f & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model id f args)], :arglists ([model id f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-gif, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model id f args)], :arglists ([model id f & args]), :arglists-meta (nil)}, :method-params [(model id f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([model id f & args])}, init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 8, :column 7, :end-line 8, :end-column 11, :arglists (quote ([]))}, :name frontend.random-gif-list/init, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-gifs* {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([model pred f & args])), :doc "Applies a function of args [gif-model & args] to the gif items specified by predicate.\n  The function can have side-effects. Returns a new model.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model pred f args)], :arglists ([model pred f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-gifs*, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model pred f args)], :arglists ([model pred f & args]), :arglists-meta (nil)}, :method-params [(model pred f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists ([model pred f & args]), :doc "Applies a function of args [gif-model & args] to the gif items specified by predicate.\n  The function can have side-effects. Returns a new model."}, control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([model event dispatch]))}, :name frontend.random-gif-list/control, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 14, :method-params ([model event dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([model event dispatch]))}, example-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 95, :column 7, :end-line 95, :end-column 19, :arglists (quote ([]))}, :name frontend.random-gif-list/example-view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-every-gif {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 27, :column 7, :end-line 27, :end-column 23, :arglists (quote ([model f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(model f args)], :arglists ([model f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-every-gif, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(model f args)], :arglists ([model f & args]), :arglists-meta (nil)}, :method-params [(model f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists ([model f & args])}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 66, :column 7, :end-line 66, :end-column 17, :arglists (quote ([model]))}, :name frontend.random-gif-list/view-model, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, element-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 71, :column 7, :end-line 71, :end-column 19, :arglists (quote ([{:keys [id item]} dispatch]))}, :name frontend.random-gif-list/element-view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 19, :method-params ([p__27248 dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [id item]} dispatch]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :gifs :hr :insert :placeholder :set-topic :else :next-id :value :item :width :flex-wrap :on-input-topic :on-insert :topic :style :div :id :display :set-new-gif :input :on-input :on-key-down :modify :on-sub-event :height}, :order [:topic :gifs :next-id :item :id :else :on-sub-event :modify :on-insert :insert :set-new-gif :on-input-topic :set-topic :on-connect :div :input :style :placeholder :value :on-key-down :on-input :width :height :hr :display :flex-wrap]}, :doc nil}