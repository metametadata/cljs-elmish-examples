;; Analyzed by ClojureScript 1.7.122
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.random-gif-list, :imports nil, :requires {com.rpl.specter com.rpl.specter, frontend.giphy-api frontend.giphy-api, reagent.core reagent.core, r reagent.core, frontend.ui frontend.ui, s com.rpl.specter, random-gif frontend.random-gif, ui frontend.ui, cljs.core.match cljs.core.match, giphy frontend.giphy-api, frontend.random-gif frontend.random-gif}, :uses nil, :defs {reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 53, :column 7, :end-line 53, :end-column 16, :arglists (quote ([model action]))}, :name frontend.random-gif-list/reconcile, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 16, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action]))}, is-enter-key? {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 78, :column 7, :end-line 78, :end-column 20, :arglists (quote ([e]))}, :name frontend.random-gif-list/is-enter-key?, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 20, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 82, :column 7, :end-line 82, :end-column 11, :arglists (quote ([view-model dispatch]))}, :name frontend.random-gif-list/view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch]))}, model {:name frontend.random-gif-list/model, :file "src/frontend/random_gif_list.cljs", :line 97, :column 1, :end-line 97, :end-column 15, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 97, :column 10, :end-line 97, :end-column 15}}, update-gif {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([model id f & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model id f args)], :arglists ([model id f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-gif, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model id f args)], :arglists ([model id f & args]), :arglists-meta (nil)}, :method-params [(model id f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists ([model id f & args])}, init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([]))}, :name frontend.random-gif-list/init, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 32, :column 7, :end-line 32, :end-column 18, :arglists (quote ([gif-fetcher]))}, :name frontend.random-gif-list/new-control, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 18, :method-params ([gif-fetcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gif-fetcher]))}, update-gifs* {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 16, :column 7, :end-line 16, :end-column 19, :arglists (quote ([model pred f & args])), :doc "Applies a function of args [gif-model & args] to the gif items specified by predicate.\n  The function can have side-effects. Returns a new model.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model pred f args)], :arglists ([model pred f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-gifs*, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(model pred f args)], :arglists ([model pred f & args]), :arglists-meta (nil)}, :method-params [(model pred f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists ([model pred f & args]), :doc "Applies a function of args [gif-model & args] to the gif items specified by predicate.\n  The function can have side-effects. Returns a new model."}, example-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 105, :column 7, :end-line 105, :end-column 19, :arglists (quote ([])), :doc "Wrapper to get rid of unnecessary calls to ui/connect on Figwheel reloads.\n  In particalur, :on-connect will not be triggered on each reload."}, :name frontend.random-gif-list/example-view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Wrapper to get rid of unnecessary calls to ui/connect on Figwheel reloads.\n  In particalur, :on-connect will not be triggered on each reload."}, update-every-gif {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 28, :column 7, :end-line 28, :end-column 23, :arglists (quote ([model f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(model f args)], :arglists ([model f & args]), :arglists-meta (nil)}}, :name frontend.random-gif-list/update-every-gif, :variadic true, :file "src/frontend/random_gif_list.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(model f args)], :arglists ([model f & args]), :arglists-meta (nil)}, :method-params [(model f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([model f & args])}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 69, :column 7, :end-line 69, :end-column 17, :arglists (quote ([model]))}, :name frontend.random-gif-list/view-model, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, element-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 74, :column 7, :end-line 74, :end-column 19, :arglists (quote ([{:keys [id item]} dispatch]))}, :name frontend.random-gif-list/element-view, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 19, :method-params ([p__36138 dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [id item]} dispatch]))}, example {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_list.cljs", :line 98, :column 7, :end-line 98, :end-column 14, :arglists (quote ([]))}, :name frontend.random-gif-list/example, :variadic false, :file "src/frontend/random_gif_list.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :sub-action :gifs :hr :insert :placeholder :set-topic :else :next-id :value :item :width :flex-wrap :on-input-topic :on-insert :topic :style :div :id :display :set-new-gif :input :on-sub-signal :on-change :on-key-down :view :height}, :order [:topic :gifs :next-id :item :id :else :on-sub-signal :sub-action :on-insert :insert :set-new-gif :on-input-topic :set-topic :on-connect :div :input :style :placeholder :value :on-key-down :on-change :width :height :hr :display :flex-wrap :view]}, :doc nil}