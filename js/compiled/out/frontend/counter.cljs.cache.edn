;; Analyzed by ClojureScript 1.7.170
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.counter, :imports nil, :requires {cljs.core.match cljs.core.match}, :uses nil, :defs {init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([x])), :doc "Pure function. Creates a model intance."}, :name frontend.counter/init, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Pure function. Creates a model intance."}, control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 9, :column 7, :end-line 9, :end-column 14, :arglists (quote ([_model signal dispatch])), :doc "Non-pure signal handler.\n  Based on current model snapshot and received signal it can dispatch actions further to reconcile."}, :name frontend.counter/control, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 14, :method-params ([_model signal dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_model signal dispatch])), :doc "Non-pure signal handler.\n  Based on current model snapshot and received signal it can dispatch actions further to reconcile."}, reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 18, :column 7, :end-line 18, :end-column 16, :arglists (quote ([model action])), :doc "Pure function. It returns a new model based on current model snapshot and received action."}, :name frontend.counter/reconcile, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 16, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :doc "Pure function. It returns a new model based on current model snapshot and received action."}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([model])), :doc "Pure function. Given a model snapshot returns an immutable value for view to display."}, :name frontend.counter/view-model, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model])), :doc "Pure function. Given a model snapshot returns an immutable value for view to display."}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 30, :column 7, :end-line 30, :end-column 11, :arglists (quote ([view-model dispatch])), :doc "Pure function. View is given an immutable view-model and a signal dispatching function."}, :name frontend.counter/view, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch])), :doc "Pure function. View is given an immutable view-model and a signal dispatching function."}, view-with-remove-button {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 38, :column 7, :end-line 38, :end-column 30, :arglists (quote ([view-model {:keys [dispatch dispatch-on-remove], :as _context_}])), :doc "dispatch-on-remove is passed because it's up to container to decide how to handle removing."}, :name frontend.counter/view-with-remove-button, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :end-column 30, :method-params ([view-model p__29361]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model {:keys [dispatch dispatch-on-remove], :as _context_}])), :doc "dispatch-on-remove is passed because it's up to container to decide how to handle removing."}, spec {:name frontend.counter/spec, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 47, :column 1, :end-line 47, :end-column 10, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 47, :column 6, :end-line 47, :end-column 10}}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :increment :init :on-decrement :else :button :on-increment :on-click :div :dispatch :dispatch-on-remove :control :view-model :decrement :reconcile :view :span}, :order [:else :on-decrement :decrement :on-increment :increment :on-connect :div :button :on-click :span :dispatch :dispatch-on-remove :init :view-model :view :control :reconcile]}, :doc nil}