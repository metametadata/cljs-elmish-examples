;; Analyzed by ClojureScript 1.7.122
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.counter, :imports nil, :requires {ui frontend.ui, frontend.ui frontend.ui, cljs.core.match cljs.core.match, r reagent.core, reagent.core reagent.core}, :uses nil, :defs {init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([x])), :doc "Creates a model intance."}, :name frontend.counter/init, :variadic false, :file "src/frontend/counter.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Creates a model intance."}, control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([_model_ signal dispatch])), :doc "Non-pure signal handler.\n  Based on current model snapshot and received signal it can dispatch actions further to reconcile."}, :name frontend.counter/control, :variadic false, :file "src/frontend/counter.cljs", :end-column 14, :method-params ([_model_ signal dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_model_ signal dispatch])), :doc "Non-pure signal handler.\n  Based on current model snapshot and received signal it can dispatch actions further to reconcile."}, reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([model action])), :doc "Pure function. It returns a new model based on current model snapshot and received action."}, :name frontend.counter/reconcile, :variadic false, :file "src/frontend/counter.cljs", :end-column 16, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :doc "Pure function. It returns a new model based on current model snapshot and received action."}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([model])), :doc "Pure function. Given a model snapshot returns an immutable value for view to display."}, :name frontend.counter/view-model, :variadic false, :file "src/frontend/counter.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model])), :doc "Pure function. Given a model snapshot returns an immutable value for view to display."}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 32, :column 7, :end-line 32, :end-column 11, :arglists (quote ([view-model dispatch])), :doc "Pure function. View is given an immutable view-model and a signal dispatching function."}, :name frontend.counter/view, :variadic false, :file "src/frontend/counter.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch])), :doc "Pure function. View is given an immutable view-model and a signal dispatching function."}, view-with-remove-button {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 40, :column 7, :end-line 40, :end-column 30, :arglists (quote ([view-model {:keys [dispatch dispatch-on-remove], :as _context_}])), :doc "dispatch-on-remove is passed because it's up to container to decide how to handle removing."}, :name frontend.counter/view-with-remove-button, :variadic false, :file "src/frontend/counter.cljs", :end-column 30, :method-params ([view-model p__27125]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model {:keys [dispatch dispatch-on-remove], :as _context_}])), :doc "dispatch-on-remove is passed because it's up to container to decide how to handle removing."}, model {:name frontend.counter/model, :file "src/frontend/counter.cljs", :line 49, :column 1, :end-line 49, :end-column 15, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 49, :column 10, :end-line 49, :end-column 15}}, example {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/counter.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([]))}, :name frontend.counter/example, :variadic false, :file "src/frontend/counter.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :increment :on-decrement :else :button :on-increment :on-click :div :dispatch :dispatch-on-remove :decrement :span}, :order [:else :on-decrement :decrement :on-increment :increment :on-connect :div :button :on-click :span :dispatch :dispatch-on-remove]}, :doc nil}