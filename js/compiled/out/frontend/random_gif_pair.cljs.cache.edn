;; Analyzed by ClojureScript 1.7.122
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.random-gif-pair, :imports nil, :requires {ui frontend.ui, frontend.ui frontend.ui, giphy frontend.giphy-api, frontend.giphy-api frontend.giphy-api, r reagent.core, reagent.core reagent.core, cljs.core.match cljs.core.match, random-gif frontend.random-gif, frontend.random-gif frontend.random-gif}, :uses nil, :defs {init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 8, :column 7, :end-line 8, :end-column 11, :arglists (quote ([topic-left topic-right]))}, :name frontend.random-gif-pair/init, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 11, :method-params ([topic-left topic-right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([topic-left topic-right]))}, new-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([gif-fetcher]))}, :name frontend.random-gif-pair/new-control, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 18, :method-params ([gif-fetcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gif-fetcher]))}, reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([model action]))}, :name frontend.random-gif-pair/reconcile, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 16, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action]))}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([model]))}, :name frontend.random-gif-pair/view-model, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 43, :column 7, :end-line 43, :end-column 11, :arglists (quote ([view-model dispatch]))}, :name frontend.random-gif-pair/view, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch]))}, model {:name frontend.random-gif-pair/model, :file "src/frontend/random_gif_pair.cljs", :line 49, :column 1, :end-line 49, :end-column 15, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 49, :column 10, :end-line 49, :end-column 15}}, example {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([]))}, :name frontend.random-gif-pair/example, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, example-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([])), :doc "Wrapper to get rid of unnecessary calls to ui/connect on Figwheel reloads.\n  In particalur, :on-connect will not be triggered on each reload."}, :name frontend.random-gif-pair/example-view, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Wrapper to get rid of unnecessary calls to ui/connect on Figwheel reloads.\n  In particalur, :on-connect will not be triggered on each reload."}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :else :style :div :right :display :view :left}, :order [:left :right :else :on-connect :div :style :display :view]}, :doc nil}