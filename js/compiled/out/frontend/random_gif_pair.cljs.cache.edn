;; Analyzed by ClojureScript 1.7.170
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.random-gif-pair, :imports nil, :requires {ui frontend.ui, frontend.ui frontend.ui, random-gif frontend.random-gif, frontend.random-gif frontend.random-gif, cljs.core.match cljs.core.match}, :uses nil, :defs {init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([topic-left topic-right]))}, :name frontend.random-gif-pair/init, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 11, :method-params ([topic-left topic-right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([topic-left topic-right]))}, new-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([gif-fetcher]))}, :name frontend.random-gif-pair/new-control, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 18, :method-params ([gif-fetcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gif-fetcher]))}, reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([model action]))}, :name frontend.random-gif-pair/reconcile, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 16, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action]))}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 36, :column 7, :end-line 36, :end-column 17, :arglists (quote ([model]))}, :name frontend.random-gif-pair/view-model, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 41, :column 7, :end-line 41, :end-column 11, :arglists (quote ([view-model dispatch]))}, :name frontend.random-gif-pair/view, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch]))}, new-spec {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif_pair.cljs", :line 47, :column 7, :end-line 47, :end-column 15, :arglists (quote ([gif-fetcher]))}, :name frontend.random-gif-pair/new-spec, :variadic false, :file "src/frontend/random_gif_pair.cljs", :end-column 15, :method-params ([gif-fetcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gif-fetcher]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :init :else :style :div :control :view-model :right :display :reconcile :view :left}, :order [:left :right :else :on-connect :div :style :display :init :view-model :view :control :reconcile]}, :doc nil}