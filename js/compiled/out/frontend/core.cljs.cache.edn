;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name frontend.core, :imports nil, :requires {persistence frontend.persistence-middleware, frontend.persistence-middleware frontend.persistence-middleware, frontend.giphy-api frontend.giphy-api, frontend.generic-list frontend.generic-list, counter-pair frontend.counter-pair, frontend.counter-pair frontend.counter-pair, reagent.core reagent.core, r reagent.core, frontend.counter-list frontend.counter-list, frontend.counter frontend.counter, frontend.ui frontend.ui, counter-list-fancy frontend.counter-list-fancy, counter-list frontend.counter-list, generic-list frontend.generic-list, frontend.random-gif-list frontend.random-gif-list, counter frontend.counter, random-gif frontend.random-gif, ui frontend.ui, random-gif-list frontend.random-gif-list, frontend.random-gif-pair frontend.random-gif-pair, frontend.counter-list-fancy frontend.counter-list-fancy, giphy frontend.giphy-api, frontend.random-gif frontend.random-gif, random-gif-pair frontend.random-gif-pair}, :uses nil, :defs {hot-reload-storage {:name frontend.core/hot-reload-storage, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 18, :column 1, :end-line 18, :end-column 28, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 18, :column 10, :end-line 18, :end-column 28}}, example-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 20, :column 7, :end-line 20, :end-column 19, :arglists (quote ([storage-key spec & init-args])), :doc "Given a component spec and init args constructs a component instance with logging and hot-reload persistence.\n  Returns instance's view.\n\n  Storage key must be unique for each example.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(storage-key spec init-args)], :arglists ([storage-key spec & init-args]), :arglists-meta (nil)}}, :name frontend.core/example-view, :variadic true, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(storage-key spec init-args)], :arglists ([storage-key spec & init-args]), :arglists-meta (nil)}, :method-params [(storage-key spec init-args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists ([storage-key spec & init-args]), :doc "Given a component spec and init args constructs a component instance with logging and hot-reload persistence.\n  Returns instance's view.\n\n  Storage key must be unique for each example."}, counter-example {:name frontend.core/counter-example, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 34, :column 1, :end-line 34, :end-column 21, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 34, :column 6, :end-line 34, :end-column 21}}, title {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 38, :column 7, :end-line 38, :end-column 12, :arglists (quote ([text]))}, :name frontend.core/title, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :end-column 12, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, app-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 42, :column 7, :end-line 42, :end-column 15, :arglists (quote ([]))}, :name frontend.core/app-view, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 80, :column 7, :end-line 80, :end-column 11, :arglists (quote ([]))}, :name frontend.core/main, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :line 87, :column 7, :end-line 87, :end-column 19, :arglists (quote ([]))}, :name frontend.core/on-js-reload, :variadic false, :file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:list-of-lists :margin-left :counter-list-fancy :counter-list :flex-wrap :style :div :random-gif :random-gif-list :random-gif-pair :display :margin-right :h3 :counter-pair :flex-direction :view}, :order [:view :div :style :margin-left :margin-right :display :flex-direction :flex-wrap :h3 :counter-pair :counter-list :counter-list-fancy :random-gif :random-gif-pair :random-gif-list :list-of-lists]}, :doc nil}