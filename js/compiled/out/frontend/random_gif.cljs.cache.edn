;; Analyzed by ClojureScript 1.7.122
{:use-macros {match cljs.core.match}, :excludes #{}, :name frontend.random-gif, :imports nil, :requires {ui frontend.ui, frontend.ui frontend.ui, ajax ajax.core, ajax.core ajax.core, r reagent.core, reagent.core reagent.core, cljs.core.match cljs.core.match}, :uses nil, :defs {init {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([topic])), :doc "Creates a gif with specified topic and waiting indicator."}, :name frontend.random-gif/init, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 11, :method-params ([topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([topic])), :doc "Creates a gif with specified topic and waiting indicator."}, get-random-gif {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 13, :column 7, :end-line 13, :end-column 21, :arglists (quote ([topic handler])), :doc "Async. Will eventually call (handler url) on success."}, :name frontend.random-gif/get-random-gif, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 21, :method-params ([topic handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([topic handler])), :doc "Async. Will eventually call (handler url) on success."}, control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([model event dispatch]))}, :name frontend.random-gif/control, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 14, :method-params ([model event dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([model event dispatch]))}, reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([model command]))}, :name frontend.random-gif/reconcile, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 16, :method-params ([model command]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model command]))}, view-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 33, :column 7, :end-line 33, :end-column 17, :arglists (quote ([model]))}, :name frontend.random-gif/view-model, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 17, :method-params ([model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([model]))}, view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([view-model dispatch]))}, :name frontend.random-gif/view, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 11, :method-params ([view-model dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view-model dispatch]))}, model {:name frontend.random-gif/model, :file "src/frontend/random_gif.cljs", :line 46, :column 1, :end-line 46, :end-column 15, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 46, :column 10, :end-line 46, :end-column 15}}, example-view {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/random_gif.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([]))}, :name frontend.random-gif/example-view, :variadic false, :file "src/frontend/random_gif.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:on-connect :else :gif-url :button :strong :width :params :src :topic :on-click :style :div :set-new-gif :handler :on-request-more :img}, :order [:topic :gif-url :params :handler :else :on-request-more :set-new-gif :on-connect :div :strong :button :on-click :img :style :src :width]}, :doc nil}