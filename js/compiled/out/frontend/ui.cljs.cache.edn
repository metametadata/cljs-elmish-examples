;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name frontend.ui, :imports nil, :requires {r reagent.core, reagent.core reagent.core, cljs.pprint cljs.pprint}, :uses nil, :defs {connect-reagent {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Given a component spec map returns a connected component which can be rendered using Reagent.\n\n  :control can be a non-pure function, :init, :view-model, :view and :reconcile must be pure functions.\n\n  init-args will be passed to :init function.\n\n  Dispatches :on-connect signal and returns a map with:\n      :view (Reagent view function),\n      :dispatch-signal (it can be used to dispatch signals not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging) - returns updated model.\n\n  Data flow:\n  (init)\n  |\n  V\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, :name frontend.ui/connect-reagent, :variadic false, :file "src/frontend/ui.cljs", :end-column 22, :method-params ([p__28417 init-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [init view-model view control reconcile], :as _spec_} init-args])), :doc "Given a component spec map returns a connected component which can be rendered using Reagent.\n\n  :control can be a non-pure function, :init, :view-model, :view and :reconcile must be pure functions.\n\n  init-args will be passed to :init function.\n\n  Dispatches :on-connect signal and returns a map with:\n      :view (Reagent view function),\n      :dispatch-signal (it can be used to dispatch signals not only from the view),\n      :model ratom (this is exposed mainly for debugging),\n      :dispatch-action (this is exposed mainly for debugging) - returns updated model.\n\n  Data flow:\n  (init)\n  |\n  V\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model -> etc."}, tagged {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 40, :column 7, :end-line 40, :end-column 13, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, :name frontend.ui/tagged, :variadic false, :file "src/frontend/ui.cljs", :end-column 13, :method-params ([f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, wrap-log {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 49, :column 7, :end-line 49, :end-column 15, :arglists (quote ([spec]))}, :name frontend.ui/wrap-log, :variadic false, :file "src/frontend/ui.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:on-connect :init :dispatch-action :dispatch-signal :control :view-model :reconcile :view :model}, :order [:init :view-model :view :control :reconcile :on-connect :dispatch-signal :model :dispatch-action]}, :doc nil}