;; Analyzed by ClojureScript 1.7.122
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name frontend.ui, :imports nil, :requires {r reagent.core, reagent.core reagent.core}, :uses nil, :defs {connect {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([model view-model view control reconcile])), :doc "Model must be a ratom.\n  Returns a map with :view, :dispatch-signal, :dispatch-action (dispatch functions are exposed mainly for debugging).\n\n  Automatically fires :on-connect signal.\n\n  Data flow:\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model"}, :name frontend.ui/connect, :variadic false, :file "src/frontend/ui.cljs", :end-column 14, :method-params ([model view-model view control reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 5, :fn-var true, :arglists (quote ([model view-model view control reconcile])), :doc "Model must be a ratom.\n  Returns a map with :view, :dispatch-signal, :dispatch-action (dispatch functions are exposed mainly for debugging).\n\n  Automatically fires :on-connect signal.\n\n  Data flow:\n  model -> (view-model) -> (view) -signal-> (control) -action-> (reconcile) -> model"}, tagged {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 26, :column 7, :end-line 26, :end-column 13, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, :name frontend.ui/tagged, :variadic false, :file "src/frontend/ui.cljs", :end-column 13, :method-params ([f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, wrap-log-signals {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 35, :column 7, :end-line 35, :end-column 23, :arglists (quote ([control]))}, :name frontend.ui/wrap-log-signals, :variadic false, :file "src/frontend/ui.cljs", :end-column 23, :method-params ([control]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([control]))}, wrap-log-actions {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 43, :column 7, :end-line 43, :end-column 23, :arglists (quote ([reconcile]))}, :name frontend.ui/wrap-log-actions, :variadic false, :file "src/frontend/ui.cljs", :end-column 23, :method-params ([reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconcile]))}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:on-connect :dispatch-action :dispatch-signal :view}, :order [:on-connect :view :dispatch-action :dispatch-signal]}, :doc nil}