;; Analyzed by ClojureScript 1.7.122
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name frontend.ui, :imports nil, :requires nil, :uses nil, :defs {connect {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([model view-model _view_ control reconcile])), :doc "Returns a new view. Model must be a ratom.\n\n  Data flow:\n  model -> view-model -> view -(dispatch event)-> control -(dispatch command)-> reconcile -(update)-> model\n\n  Automatically fires :on-connect event.\n  "}, :name frontend.ui/connect, :variadic false, :file "src/frontend/ui.cljs", :end-column 14, :method-params ([model view-model _view_ control reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 5, :fn-var true, :arglists (quote ([model view-model _view_ control reconcile])), :doc "Returns a new view. Model must be a ratom.\n\n  Data flow:\n  model -> view-model -> view -(dispatch event)-> control -(dispatch command)-> reconcile -(update)-> model\n\n  Automatically fires :on-connect event.\n  "}, tagged {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, :name frontend.ui/tagged, :variadic false, :file "src/frontend/ui.cljs", :end-column 13, :method-params ([f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f tag])), :doc "Function decorator which prepends a tag to the single argument.\n  I.e. it transforms an arg x to [tag x]."}, wrap-log-events {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([control]))}, :name frontend.ui/wrap-log-events, :variadic false, :file "src/frontend/ui.cljs", :end-column 22, :method-params ([control]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([control]))}, wrap-log-commands {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/cljs-elmish-examples/src/frontend/ui.cljs", :line 41, :column 7, :end-line 41, :end-column 24, :arglists (quote ([reconcile]))}, :name frontend.ui/wrap-log-commands, :variadic false, :file "src/frontend/ui.cljs", :end-column 24, :method-params ([reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconcile]))}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:on-connect}, :order [:on-connect]}, :doc nil}